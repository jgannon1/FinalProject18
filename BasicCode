import random

class Card:

    def __init__(self, suit, name):
        self.suit = suit
        self.name = name
        self.value = self.get_value(name)

    def get_value(self, name):
        values = {'ace': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10, 'jack': 11, 'queen': 12, 'king': 13}
        return values[name]

    def __str__(self):
        return f"{self.name} of {self.suit}"

    __repr__ = __str__

deck = []

for suit in ['spades', 'diamonds', 'hearts', 'clubs']:
    for name in ['ace', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'jack', 'queen', 'king']:
        print(f"{name} of {suit}")
        deck.append(Card(suit, name))

player = []
player_value = 0

def get_player_sum(hand):
    player_value = 0
    for n in range (len(player)):
        player_value += player[n].get_value(player[n].name)
    return player_value

def player_draw(cards_to_draw):
    global player
    global deck

    for i in range (cards_to_draw):
        drawn = random.choice(deck)
        deck.remove(drawn)
        player.append(drawn
    print(f"You currently have {player}")

    while get_player_sum(player) < 21:
        choice = input(f"You only have {get_player_sum(player)}, do you want to hit?")
        if choice == 'hit':
            player_draw(1)
        else:
            print(f"Your hand value is {get_player_sum(player)} and you decided to stay, good luck against the dealer!")
        break

dealer_value = 0
dealer = []

def get_dealer_sum(hand):
    dealer_value = 0
    for n in range(len(dealer)):
        dealer_value += dealer[n].get_value(dealer[n].name)
    return dealer_value

def dealer_draw(cards_to_draw):
    global dealer
    global deck

    for i in range(cards_to_draw):
        drawn = random.choice(deck)
        deck.remove(drawn)
        dealer.append(drawn)
    print(f"The dealer currently has {dealer}.")

    while get_dealer_sum(dealer) < 14:
        print(f"Dealer only has {get_dealer_sum(dealer)}, so dealer hits.")
        dealer_draw(1)
        break


def evaluate_winner():
    if get_player_sum(player) > get_dealer_sum(dealer) and get_player_sum(player) < 21:
        print(f"You win! {get_player_sum(player)} beats {get_dealer_sum(dealer)}.")
    elif get_player_sum(player) > 21:
        print(f"You Busted! Dealer Wins!")
    elif get_dealer_sum(dealer) > 21:
        print(f"Dealer Busted! You Win!")
    else:
        print(f"Dealer wins! {get_dealer_Sum(dealer)} beats {get_player_sum(player)}.")


player_draw(2)
if get_player_sum(player) == 21:
    print(f"BlackJack! You win!")

dealer_draw(2)
if get_dealer_sum(dealer) >= 14 and get_dealer_sum(dealer) < 21:
    print(f"Dealer currently has {get_dealer_sum(dealer)}, so dealer stays.")
else:
    print(f"Dealer busts, you win!")

evaluate_winner()




